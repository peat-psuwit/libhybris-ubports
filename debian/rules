#!/usr/bin/make -f

include /usr/share/dpkg/pkg-info.mk
include /usr/share/dpkg/architecture.mk

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

PKG_driver      := libhybris
# This requires that the version be in a specific format.
GIT_rev          = $(shell echo '$(DEB_VERSION_UPSTREAM)' | sed 's/.*+//')

# Strong needs at least gcc 4.9
export DEB_BUILD_MAINT_OPTIONS=hardening=-stackprotectorstrong

# Priority of the alternatives
alt_priority    := 400

# Directory naming schemes
PKG_dirname             := $(PKG_driver)-egl
bindir                  := usr/bin
datadir                 := usr/share
libdir                  := usr/lib/$(DEB_HOST_MULTIARCH)
includedir              := usr/include
sysconfdir              := etc
PKG_libdir              := $(libdir)/$(PKG_dirname)
PKG_configdir           := $(PKG_libdir)
ld_so_conf_dir          := $(PKG_configdir)
ld_so_conf_file         := ld.so.conf
alt_ld_so_conf_file     := alt_ld.so.conf
ld_so_conf_path         := $(ld_so_conf_dir)/$(ld_so_conf_file)
alt_ld_so_conf_path     := $(ld_so_conf_dir)/$(alt_ld_so_conf_file)

override_dh_auto_clean: debian/control
	dh_auto_clean

# --remote doesn't work with github so this needs to be run from a local checkout
get-packaged-orig-source:
	rm -rf $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM)
	rm -f $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM).orig.tar.gz
	git clone https://github.com/libhybris/libhybris.git $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM)
	cd $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM) && git archive \
		--format tar \
		--prefix $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM)/ \
		$(GIT_rev) \
		| gzip >../$(DEB_SOURCE)_$(DEB_VERSION_UPSTREAM).orig.tar.gz
	rm -rf $(DEB_SOURCE)-$(DEB_VERSION_UPSTREAM)

ANDROID_HEADERS_PATH = /usr/include/android-28
DEFAULT_CONFIGURATION = \
	--enable-wayland \
	--with-android-headers=$(ANDROID_HEADERS_PATH) \
	--enable-property-cache
ARCH_CONFIGURATION =

ifeq ($(DEB_HOST_ARCH),$(findstring $(DEB_HOST_ARCH), armhf))
ARCH_CONFIGURATION = \
	--enable-arch=arm \
	--enable-mali-quirks \
	--enable-experimental
# We enable the linker selection overrides here as we want to stay
# with the jb linker on a range of selected production devices to
# not cause any extra risk for regressions on them. They will
# migrate to a newer linker version when ported to arm64.
ARCH_CONFIGURATION += \
	--enable-ubuntu-linker-overrides
endif
ifeq ($(DEB_HOST_ARCH),$(findstring $(DEB_HOST_ARCH), arm64))
ARCH_CONFIGURATION = \
	--enable-arch=arm64 \
	--enable-mali-quirks \
	--enable-experimental
endif
ifeq ($(DEB_HOST_ARCH),$(findstring $(DEB_HOST_ARCH), i386))
ARCH_CONFIGURATION = \
	--enable-arch=x86
endif
ifeq ($(DEB_HOST_ARCH),$(findstring $(DEB_HOST_ARCH), amd64))
ARCH_CONFIGURATION = \
	--enable-arch=x86
endif

override_dh_auto_configure:
	dh_auto_configure --sourcedirectory=hybris -- \
		$(DEFAULT_CONFIGURATION) \
		$(ARCH_CONFIGURATION)

override_dh_install:
	# Fill in important variables
	for i in $(PKG_driver).dirs \
			$(PKG_driver).install \
			$(PKG_driver).links \
			$(PKG_driver).postinst \
			$(PKG_driver).postrm \
			$(PKG_driver).prerm; do \
		sed -e "s|#LIBDIR#|$(libdir)|g" \
			-e "s|#BINDIR#|$(bindir)|g" \
			-e "s|#SYSCONFDIR#|$(sysconfdir)|g" \
			-e "s|#LDSOCONF#|$(ld_so_conf_path)|g" \
			-e "s|#ALTLDSOCONF#|$(alt_ld_so_conf_path)|g" \
			-e "s|#ALTPRIORITY#|$(alt_priority)|g" \
			-e "s|#DATADIR#|$(datadir)|g" \
			-e "s|#PKGCONFIGDIR#|$(PKG_configdir)|g" \
			-e "s|#PKGLIBDIR#|$(PKG_libdir)|g" \
			-e "s|#DRIVERNAME#|$(PKG_driver)|g" \
			-e "s|#DRIVERSRCNAME#|$(DEB_SOURCE)|g" \
			-e "s|#VERSION#|$(DEB_VERSION)|g" \
			-e "s|#INCLUDEDIR#|$(includedir)|g" \
			-e "s|#DEB_HOST_MULTIARCH#|$(DEB_HOST_MULTIARCH)|g" \
			debian/$$i.in > debian/$$i; \
	done

	dh_install

	# ld.so.conf
	echo "/$(PKG_libdir)" > "$(CURDIR)/debian/$(PKG_driver)/$(ld_so_conf_path)"

	# empty ld.so.conf for the fake multi-arch alternative
	echo "" > "$(CURDIR)/debian/$(PKG_driver)/$(alt_ld_so_conf_path)"

override_dh_autoreconf:
	NOCONFIGURE=1 dh_autoreconf ./hybris/autogen.sh

%:
	dh $@ --sourcedirectory=hybris
